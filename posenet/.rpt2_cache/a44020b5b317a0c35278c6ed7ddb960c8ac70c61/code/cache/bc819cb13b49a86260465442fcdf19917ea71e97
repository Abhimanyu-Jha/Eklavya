{"code":"import * as tf from '@tensorflow/tfjs';\r\nvar mobileNet100Architecture = [\r\n    ['conv2d', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1]\r\n];\r\nvar mobileNet75Architecture = [\r\n    ['conv2d', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1]\r\n];\r\nvar mobileNet50Architecture = [\r\n    ['conv2d', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 2],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1],\r\n    ['separableConv', 1]\r\n];\r\nvar mobileNet25Architecture = mobileNet50Architecture;\r\nvar VALID_OUTPUT_STRIDES = [8, 16, 32];\r\nexport function assertValidOutputStride(outputStride) {\r\n    tf.util.assert(typeof outputStride === 'number', 'outputStride is not a number');\r\n    tf.util.assert(VALID_OUTPUT_STRIDES.indexOf(outputStride) >= 0, \"outputStride of \" + outputStride + \" is invalid. \" +\r\n        \"It must be either 8, 16, or 32\");\r\n}\r\nexport function assertValidResolution(resolution, outputStride) {\r\n    tf.util.assert(typeof resolution === 'number', 'resolution is not a number');\r\n    tf.util.assert((resolution - 1) % outputStride === 0, \"resolution of \" + resolution + \" is invalid for output stride \" +\r\n        (outputStride + \".\"));\r\n}\r\nexport function assertValidScaleFactor(imageScaleFactor) {\r\n    tf.util.assert(typeof imageScaleFactor === 'number', 'imageScaleFactor is not a number');\r\n    tf.util.assert(imageScaleFactor >= 0.2 && imageScaleFactor <= 1.0, 'imageScaleFactor must be between 0.2 and 1.0');\r\n}\r\nexport var mobileNetArchitectures = {\r\n    100: mobileNet100Architecture,\r\n    75: mobileNet75Architecture,\r\n    50: mobileNet50Architecture,\r\n    25: mobileNet25Architecture\r\n};\r\nfunction toOutputStridedLayers(convolutionDefinition, outputStride) {\r\n    var currentStride = 1;\r\n    var rate = 1;\r\n    return convolutionDefinition.map(function (_a, blockId) {\r\n        var convType = _a[0], stride = _a[1];\r\n        var layerStride, layerRate;\r\n        if (currentStride === outputStride) {\r\n            layerStride = 1;\r\n            layerRate = rate;\r\n            rate *= stride;\r\n        }\r\n        else {\r\n            layerStride = stride;\r\n            layerRate = 1;\r\n            currentStride *= stride;\r\n        }\r\n        return {\r\n            blockId: blockId,\r\n            convType: convType,\r\n            stride: layerStride,\r\n            rate: layerRate,\r\n            outputStride: currentStride\r\n        };\r\n    });\r\n}\r\nvar MobileNet = (function () {\r\n    function MobileNet(modelWeights, convolutionDefinitions) {\r\n        this.PREPROCESS_DIVISOR = tf.scalar(255.0 / 2);\r\n        this.ONE = tf.scalar(1.0);\r\n        this.modelWeights = modelWeights;\r\n        this.convolutionDefinitions = convolutionDefinitions;\r\n    }\r\n    MobileNet.prototype.predict = function (input, outputStride) {\r\n        var _this = this;\r\n        var normalized = tf.div(input.toFloat(), this.PREPROCESS_DIVISOR);\r\n        var preprocessedInput = tf.sub(normalized, this.ONE);\r\n        var layers = toOutputStridedLayers(this.convolutionDefinitions, outputStride);\r\n        return layers.reduce(function (previousLayer, _a) {\r\n            var blockId = _a.blockId, stride = _a.stride, convType = _a.convType, rate = _a.rate;\r\n            if (convType === 'conv2d') {\r\n                return _this.conv(previousLayer, stride, blockId);\r\n            }\r\n            else if (convType === 'separableConv') {\r\n                return _this.separableConv(previousLayer, stride, blockId, rate);\r\n            }\r\n            else {\r\n                throw Error(\"Unknown conv type of \" + convType);\r\n            }\r\n        }, preprocessedInput);\r\n    };\r\n    MobileNet.prototype.convToOutput = function (mobileNetOutput, outputLayerName) {\r\n        return mobileNetOutput.conv2d(this.weights(outputLayerName), 1, 'same')\r\n            .add(this.convBias(outputLayerName));\r\n    };\r\n    MobileNet.prototype.conv = function (inputs, stride, blockId) {\r\n        var weights = this.weights(\"Conv2d_\" + String(blockId));\r\n        var a = inputs.conv2d(weights, stride, 'same');\r\n        var b = a.add(this.convBias(\"Conv2d_\" + String(blockId)));\r\n        return b.clipByValue(0, 6);\r\n    };\r\n    MobileNet.prototype.separableConv = function (inputs, stride, blockID, dilations) {\r\n        if (dilations === void 0) { dilations = 1; }\r\n        var dwLayer = \"Conv2d_\" + String(blockID) + \"_depthwise\";\r\n        var pwLayer = \"Conv2d_\" + String(blockID) + \"_pointwise\";\r\n        var x1 = inputs\r\n            .depthwiseConv2D(this.depthwiseWeights(dwLayer), stride, 'same', 'NHWC', dilations)\r\n            .add(this.depthwiseBias(dwLayer))\r\n            .clipByValue(0, 6);\r\n        var x2 = x1.conv2d(this.weights(pwLayer), [1, 1], 'same')\r\n            .add(this.convBias(pwLayer))\r\n            .clipByValue(0, 6);\r\n        return x2;\r\n    };\r\n    MobileNet.prototype.weights = function (layerName) {\r\n        return this.modelWeights.weights(layerName);\r\n    };\r\n    MobileNet.prototype.convBias = function (layerName) {\r\n        return this.modelWeights.convBias(layerName);\r\n    };\r\n    MobileNet.prototype.depthwiseBias = function (layerName) {\r\n        return this.modelWeights.depthwiseBias(layerName);\r\n    };\r\n    MobileNet.prototype.depthwiseWeights = function (layerName) {\r\n        return this.modelWeights.depthwiseWeights(layerName);\r\n    };\r\n    MobileNet.prototype.dispose = function () {\r\n        this.modelWeights.dispose();\r\n    };\r\n    return MobileNet;\r\n}());\r\nexport { MobileNet };\r\n//# sourceMappingURL=mobilenet.js.map","map":"{\"version\":3,\"file\":\"mobilenet.js\",\"sourceRoot\":\"\",\"sources\":[\"src/mobilenet.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/abhimanyu/Eklavya/posenet/mobilenet.d.ts","text":"import * as tf from '@tensorflow/tfjs';\r\nimport { ModelWeights } from './model_weights';\r\nexport declare type MobileNetMultiplier = 0.25 | 0.50 | 0.75 | 1.0 | 1.01;\r\nexport declare type ConvolutionType = 'conv2d' | 'separableConv';\r\nexport declare type ConvolutionDefinition = [ConvolutionType, number];\r\nexport declare type OutputStride = 32 | 16 | 8;\r\nexport declare function assertValidOutputStride(outputStride: any): void;\r\nexport declare function assertValidResolution(resolution: any, outputStride: number): void;\r\nexport declare function assertValidScaleFactor(imageScaleFactor: any): void;\r\nexport declare const mobileNetArchitectures: {\r\n    [name: string]: ConvolutionDefinition[];\r\n};\r\nexport declare class MobileNet {\r\n    private modelWeights;\r\n    private convolutionDefinitions;\r\n    private PREPROCESS_DIVISOR;\r\n    private ONE;\r\n    constructor(modelWeights: ModelWeights, convolutionDefinitions: ConvolutionDefinition[]);\r\n    predict(input: tf.Tensor3D, outputStride: OutputStride): tf.Tensor3D;\r\n    convToOutput(mobileNetOutput: tf.Tensor3D, outputLayerName: string): tf.Tensor3D;\r\n    private conv;\r\n    private separableConv;\r\n    private weights;\r\n    private convBias;\r\n    private depthwiseBias;\r\n    private depthwiseWeights;\r\n    dispose(): void;\r\n}\r\n"}}
