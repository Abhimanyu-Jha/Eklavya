{"code":"var ModelWeights = (function () {\r\n    function ModelWeights(variables) {\r\n        this.variables = variables;\r\n    }\r\n    ModelWeights.prototype.weights = function (layerName) {\r\n        return this.variables[\"MobilenetV1/\" + layerName + \"/weights\"];\r\n    };\r\n    ModelWeights.prototype.depthwiseBias = function (layerName) {\r\n        return this.variables[\"MobilenetV1/\" + layerName + \"/biases\"];\r\n    };\r\n    ModelWeights.prototype.convBias = function (layerName) {\r\n        return this.depthwiseBias(layerName);\r\n    };\r\n    ModelWeights.prototype.depthwiseWeights = function (layerName) {\r\n        return this.variables[\"MobilenetV1/\" + layerName + \"/depthwise_weights\"];\r\n    };\r\n    ModelWeights.prototype.dispose = function () {\r\n        for (var varName in this.variables) {\r\n            this.variables[varName].dispose();\r\n        }\r\n    };\r\n    return ModelWeights;\r\n}());\r\nexport { ModelWeights };\r\n//# sourceMappingURL=model_weights.js.map","map":"{\"version\":3,\"file\":\"model_weights.js\",\"sourceRoot\":\"\",\"sources\":[\"src/model_weights.ts\"],\"names\":[],\"mappings\":\"AAmBA;IAGE,sBAAY,SAAyC;QACnD,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,8BAAO,GAAP,UAAQ,SAAiB;QACvB,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAe,SAAS,aAAU,CAAgB,CAAC;IAC3E,CAAC;IAED,oCAAa,GAAb,UAAc,SAAiB;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAe,SAAS,YAAS,CAAgB,CAAC;IAC1E,CAAC;IAED,+BAAQ,GAAR,UAAS,SAAiB;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED,uCAAgB,GAAhB,UAAiB,SAAiB;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,iBAAe,SAAS,uBAAoB,CACnD,CAAC;IAClB,CAAC;IAED,8BAAO,GAAP;QACE,KAAK,IAAM,OAAO,IAAI,IAAI,CAAC,SAAS,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;SACnC;IACH,CAAC;IACH,mBAAC;AAAD,CAAC,AA7BD,IA6BC\"}","dts":{"name":"/home/abhimanyu/Eklavya/posenet/model_weights.d.ts","text":"import * as tf from '@tensorflow/tfjs';\r\nexport declare class ModelWeights {\r\n    private variables;\r\n    constructor(variables: {\r\n        [varName: string]: tf.Tensor;\r\n    });\r\n    weights(layerName: string): tf.Tensor<tf.Rank.R4>;\r\n    depthwiseBias(layerName: string): tf.Tensor<tf.Rank.R1>;\r\n    convBias(layerName: string): tf.Tensor<tf.Rank.R1>;\r\n    depthwiseWeights(layerName: string): tf.Tensor<tf.Rank.R4>;\r\n    dispose(): void;\r\n}\r\n"}}
