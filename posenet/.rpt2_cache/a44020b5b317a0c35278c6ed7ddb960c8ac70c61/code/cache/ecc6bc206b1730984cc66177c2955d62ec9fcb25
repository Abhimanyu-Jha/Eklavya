{"code":"import * as tf from '@tensorflow/tfjs';\r\nimport { NUM_KEYPOINTS } from '../keypoints';\r\nexport function getPointsConfidence(heatmapScores, heatMapCoords) {\r\n    var numKeypoints = heatMapCoords.shape[0];\r\n    var result = new Float32Array(numKeypoints);\r\n    for (var keypoint = 0; keypoint < numKeypoints; keypoint++) {\r\n        var y = heatMapCoords.get(keypoint, 0);\r\n        var x = heatMapCoords.get(keypoint, 1);\r\n        result[keypoint] = heatmapScores.get(y, x, keypoint);\r\n    }\r\n    return result;\r\n}\r\nfunction getOffsetPoint(y, x, keypoint, offsetsBuffer) {\r\n    return {\r\n        y: offsetsBuffer.get(y, x, keypoint),\r\n        x: offsetsBuffer.get(y, x, keypoint + NUM_KEYPOINTS)\r\n    };\r\n}\r\nexport function getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer) {\r\n    var result = [];\r\n    for (var keypoint = 0; keypoint < NUM_KEYPOINTS; keypoint++) {\r\n        var heatmapY = heatMapCoordsBuffer.get(keypoint, 0).valueOf();\r\n        var heatmapX = heatMapCoordsBuffer.get(keypoint, 1).valueOf();\r\n        var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsetsBuffer), x = _a.x, y = _a.y;\r\n        result.push(y);\r\n        result.push(x);\r\n    }\r\n    return tf.tensor2d(result, [NUM_KEYPOINTS, 2]);\r\n}\r\nexport function getOffsetPoints(heatMapCoordsBuffer, outputStride, offsetsBuffer) {\r\n    return tf.tidy(function () {\r\n        var offsetVectors = getOffsetVectors(heatMapCoordsBuffer, offsetsBuffer);\r\n        return heatMapCoordsBuffer.toTensor()\r\n            .mul(tf.scalar(outputStride, 'int32'))\r\n            .toFloat()\r\n            .add(offsetVectors);\r\n    });\r\n}\r\n//# sourceMappingURL=util.js.map","map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/single_pose/util.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,KAAK,EAAE,MAAM,kBAAkB,CAAC;AACvC,OAAO,EAAC,aAAa,EAAC,MAAM,cAAc,CAAC;AAG3C,MAAM,8BACF,aAA0C,EAC1C,aAA0C;IAC5C,IAAM,YAAY,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5C,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;IAE9C,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,YAAY,EAAE,QAAQ,EAAE,EAAE;QAC1D,IAAM,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACzC,IAAM,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;KACtD;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,wBACI,CAAS,EAAE,CAAS,EAAE,QAAgB,EACtC,aAA0C;IAC5C,OAAO;QACL,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;QACpC,CAAC,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,GAAG,aAAa,CAAC;KACrD,CAAC;AACJ,CAAC;AAED,MAAM,2BACF,mBAAgD,EAChD,aAA0C;IAC5C,IAAM,MAAM,GAAa,EAAE,CAAC;IAE5B,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,GAAG,aAAa,EAAE,QAAQ,EAAE,EAAE;QAC3D,IAAM,QAAQ,GAAG,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAChE,IAAM,QAAQ,GAAG,mBAAmB,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QAE1D,IAAA,gEAAoE,EAAnE,QAAC,EAAE,QAAC,CAAgE;QAE3E,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KAChB;IAED,OAAO,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;AACjD,CAAC;AAED,MAAM,0BACF,mBAAgD,EAAE,YAAoB,EACtE,aAA0C;IAC5C,OAAO,EAAE,CAAC,IAAI,CAAC;QACb,IAAM,aAAa,GAAG,gBAAgB,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;QAE3E,OAAO,mBAAmB,CAAC,QAAQ,EAAE;aAChC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;aACrC,OAAO,EAAE;aACT,GAAG,CAAC,aAAa,CAAC,CAAC;IAC1B,CAAC,CAAC,CAAC;AACL,CAAC\"}","dts":{"name":"/home/abhimanyu/Eklavya/posenet/single_pose/util.d.ts","text":"import * as tf from '@tensorflow/tfjs';\r\nexport declare function getPointsConfidence(heatmapScores: tf.TensorBuffer<tf.Rank.R3>, heatMapCoords: tf.TensorBuffer<tf.Rank.R2>): Float32Array;\r\nexport declare function getOffsetVectors(heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>, offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D;\r\nexport declare function getOffsetPoints(heatMapCoordsBuffer: tf.TensorBuffer<tf.Rank.R2>, outputStride: number, offsetsBuffer: tf.TensorBuffer<tf.Rank.R3>): tf.Tensor2D;\r\n"}}
