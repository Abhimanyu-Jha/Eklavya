{"code":"import { NUM_KEYPOINTS } from '../keypoints';\r\nexport function getOffsetPoint(y, x, keypoint, offsets) {\r\n    return {\r\n        y: offsets.get(y, x, keypoint),\r\n        x: offsets.get(y, x, keypoint + NUM_KEYPOINTS)\r\n    };\r\n}\r\nexport function getImageCoords(part, outputStride, offsets) {\r\n    var heatmapY = part.heatmapY, heatmapX = part.heatmapX, keypoint = part.id;\r\n    var _a = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets), y = _a.y, x = _a.x;\r\n    return {\r\n        x: part.heatmapX * outputStride + x,\r\n        y: part.heatmapY * outputStride + y\r\n    };\r\n}\r\nexport function fillArray(element, size) {\r\n    var result = new Array(size);\r\n    for (var i = 0; i < size; i++) {\r\n        result[i] = element;\r\n    }\r\n    return result;\r\n}\r\nexport function clamp(a, min, max) {\r\n    if (a < min) {\r\n        return min;\r\n    }\r\n    if (a > max) {\r\n        return max;\r\n    }\r\n    return a;\r\n}\r\nexport function squaredDistance(y1, x1, y2, x2) {\r\n    var dy = y2 - y1;\r\n    var dx = x2 - x1;\r\n    return dy * dy + dx * dx;\r\n}\r\nexport function addVectors(a, b) {\r\n    return { x: a.x + b.x, y: a.y + b.y };\r\n}\r\nexport function clampVector(a, min, max) {\r\n    return { y: clamp(a.y, min, max), x: clamp(a.x, min, max) };\r\n}\r\n//# sourceMappingURL=util.js.map","map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"\",\"sources\":[\"../src/multi_pose/util.ts\"],\"names\":[],\"mappings\":\"AAiBA,OAAO,EAAC,aAAa,EAAC,MAAM,cAAc,CAAC;AAG3C,MAAM,yBACF,CAAS,EAAE,CAAS,EAAE,QAAgB,EAAE,OAAuB;IACjE,OAAO;QACL,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC;QAC9B,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,GAAG,aAAa,CAAC;KAC/C,CAAC;AACJ,CAAC;AAED,MAAM,yBACF,IAAU,EAAE,YAAoB,EAAE,OAAuB;IACpD,IAAA,wBAAQ,EAAE,wBAAQ,EAAE,kBAAY,CAAS;IAC1C,IAAA,0DAA8D,EAA7D,QAAC,EAAE,QAAC,CAA0D;IACrE,OAAO;QACL,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,YAAY,GAAG,CAAC;QACnC,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAG,YAAY,GAAG,CAAC;KACpC,CAAC;AACJ,CAAC;AAED,MAAM,oBAAuB,OAAU,EAAE,IAAY;IACnD,IAAM,MAAM,GAAQ,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;IAEpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;QAC7B,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;KACrB;IAED,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,gBAAgB,CAAS,EAAE,GAAW,EAAE,GAAW;IACvD,IAAI,CAAC,GAAG,GAAG,EAAE;QACX,OAAO,GAAG,CAAC;KACZ;IACD,IAAI,CAAC,GAAG,GAAG,EAAE;QACX,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,CAAC,CAAC;AACX,CAAC;AAED,MAAM,0BACF,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAChD,IAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACnB,IAAM,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;IACnB,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AAC3B,CAAC;AAED,MAAM,qBAAqB,CAAW,EAAE,CAAW;IACjD,OAAO,EAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAC,CAAC;AACtC,CAAC;AAED,MAAM,sBAAsB,CAAW,EAAE,GAAW,EAAE,GAAW;IAC/D,OAAO,EAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAC,CAAC;AAC5D,CAAC\"}","dts":{"name":"/home/abhimanyu/Eklavya/posenet/multi_pose/util.d.ts","text":"import { Part, TensorBuffer3D, Vector2D } from '../types';\r\nexport declare function getOffsetPoint(y: number, x: number, keypoint: number, offsets: TensorBuffer3D): Vector2D;\r\nexport declare function getImageCoords(part: Part, outputStride: number, offsets: TensorBuffer3D): Vector2D;\r\nexport declare function fillArray<T>(element: T, size: number): T[];\r\nexport declare function clamp(a: number, min: number, max: number): number;\r\nexport declare function squaredDistance(y1: number, x1: number, y2: number, x2: number): number;\r\nexport declare function addVectors(a: Vector2D, b: Vector2D): Vector2D;\r\nexport declare function clampVector(a: Vector2D, min: number, max: number): Vector2D;\r\n"}}
