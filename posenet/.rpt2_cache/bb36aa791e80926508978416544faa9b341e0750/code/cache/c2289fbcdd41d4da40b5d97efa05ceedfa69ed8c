{"code":"import { Tensor } from '@tensorflow/tfjs';\r\nvar MANIFEST_FILE = 'manifest.json';\r\nvar CheckpointLoader = (function () {\r\n    function CheckpointLoader(urlPath) {\r\n        this.urlPath = urlPath;\r\n        if (this.urlPath.charAt(this.urlPath.length - 1) !== '/') {\r\n            this.urlPath += '/';\r\n        }\r\n    }\r\n    CheckpointLoader.prototype.loadManifest = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('GET', _this.urlPath + MANIFEST_FILE);\r\n            xhr.onload = function () {\r\n                _this.checkpointManifest = JSON.parse(xhr.responseText);\r\n                resolve();\r\n            };\r\n            xhr.onerror = function (error) {\r\n                throw new Error(MANIFEST_FILE + \" not found at \" + _this.urlPath + \". \" + error);\r\n            };\r\n            xhr.send();\r\n        });\r\n    };\r\n    CheckpointLoader.prototype.getCheckpointManifest = function () {\r\n        var _this = this;\r\n        if (this.checkpointManifest == null) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this.loadManifest().then(function () {\r\n                    resolve(_this.checkpointManifest);\r\n                });\r\n            });\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            resolve(_this.checkpointManifest);\r\n        });\r\n    };\r\n    CheckpointLoader.prototype.getAllVariables = function () {\r\n        var _this = this;\r\n        if (this.variables != null) {\r\n            return new Promise(function (resolve, reject) {\r\n                resolve(_this.variables);\r\n            });\r\n        }\r\n        return new Promise(function (resolve, reject) {\r\n            _this.getCheckpointManifest().then(function (checkpointDefinition) {\r\n                var variableNames = Object.keys(_this.checkpointManifest);\r\n                var variablePromises = [];\r\n                for (var i = 0; i < variableNames.length; i++) {\r\n                    variablePromises.push(_this.getVariable(variableNames[i]));\r\n                }\r\n                Promise.all(variablePromises).then(function (variables) {\r\n                    _this.variables = {};\r\n                    for (var i = 0; i < variables.length; i++) {\r\n                        _this.variables[variableNames[i]] = variables[i];\r\n                    }\r\n                    resolve(_this.variables);\r\n                });\r\n            });\r\n        });\r\n    };\r\n    CheckpointLoader.prototype.getVariable = function (varName) {\r\n        var _this = this;\r\n        if (!(varName in this.checkpointManifest)) {\r\n            throw new Error('Cannot load non-existant variable ' + varName);\r\n        }\r\n        var variableRequestPromiseMethod = function (resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.responseType = 'arraybuffer';\r\n            var fname = _this.checkpointManifest[varName].filename;\r\n            xhr.open('GET', _this.urlPath + fname);\r\n            xhr.onload = function () {\r\n                if (xhr.status === 404) {\r\n                    throw new Error(\"Not found variable \" + varName);\r\n                }\r\n                var values = new Float32Array(xhr.response);\r\n                var tensor = Tensor.make(_this.checkpointManifest[varName].shape, { values: values });\r\n                resolve(tensor);\r\n            };\r\n            xhr.onerror = function (error) {\r\n                throw new Error(\"Could not fetch variable \" + varName + \": \" + error);\r\n            };\r\n            xhr.send();\r\n        };\r\n        if (this.checkpointManifest == null) {\r\n            return new Promise(function (resolve, reject) {\r\n                _this.loadManifest().then(function () {\r\n                    new Promise(variableRequestPromiseMethod).then(resolve);\r\n                });\r\n            });\r\n        }\r\n        return new Promise(variableRequestPromiseMethod);\r\n    };\r\n    return CheckpointLoader;\r\n}());\r\nexport { CheckpointLoader };\r\n//# sourceMappingURL=checkpoint_loader.js.map","map":"{\"version\":3,\"file\":\"checkpoint_loader.js\",\"sourceRoot\":\"\",\"sources\":[\"src/checkpoint_loader.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/abhimanyu/Eklavya/posenet/checkpoint_loader.d.ts","text":"import { Tensor } from '@tensorflow/tfjs';\r\nexport interface CheckpointVariable {\r\n    filename: string;\r\n    shape: number[];\r\n}\r\nexport declare type CheckpointManifest = {\r\n    [varName: string]: CheckpointVariable;\r\n};\r\nexport declare class CheckpointLoader {\r\n    private urlPath;\r\n    private checkpointManifest;\r\n    private variables;\r\n    constructor(urlPath: string);\r\n    private loadManifest;\r\n    getCheckpointManifest(): Promise<CheckpointManifest>;\r\n    getAllVariables(): Promise<{\r\n        [varName: string]: Tensor;\r\n    }>;\r\n    getVariable(varName: string): Promise<Tensor>;\r\n}\r\n"}}
